#!/usr/bin/env python

import sys
import optparse
import os
import tempfile
import tarfile
import urllib2
import shutil
import subprocess


class DjenesisScript(object):

    def main(self,*args):
        # Parse commandline arguments
        self._parse_commandline()

        # Inflate project from url, or default template
        if self.template:
            if any(self.template.startswith(scm) for scm in ('git+','svn+','hg+')):
                self._inflate_template_from_repo()
            elif '.tar' in self.template:
                self._inflate_template_from_url()
            else:
                self._inflate_template_from_local()
        else:
            self._inflate_template_from_default()

        # Build virtualenv if needed
        if self.virtualenv_directory:
            self._build_virtualenv()
            # Bootstrap virtualenv packages
            self._install_requirements()

    def _parse_commandline(self):
        parser = optparse.OptionParser(usage="Usage: %prog <output_directory> [options] [package...]")
        parser.add_option("-e", "--virtualenv", help="Specify the directory to create the virtualenv at")
        parser.add_option("",   "--no-virtualenv", action='store_true', default=False, help="Don't create a virtualenv")
        parser.add_option("-t", "--template", help="Specify template URL to inflate from")

        (options, args) = parser.parse_args()
        if len(args) < 1:
            parser.print_help()
            sys.exit(1)

        self.code_directory = self._real_path(args.pop(0))
        self.pip_packages = args

        if getattr(options, 'no_virtualenv',False):
            self.virtualenv_directory = None
        else:
            self.virtualenv_directory = getattr(options, 'virtualenv',None)
            if self.virtualenv_directory is None:
                self.virtualenv_directory = self._real_path(os.path.join(os.path.dirname(self.code_directory), 'env-'+os.path.basename(self.code_directory)))

        self.template = getattr(options, 'template', None)

    def _inflate_template_from_repo(self):
        scm, url = self.template.split('+')
        if scm == 'git':
            call_args = ["git", "clone", url, self.code_directory]
        elif scm == 'svn':
            call_args = ["svn", "checkout", url, self.code_directory]
        elif scm == 'hg':
            call_args = ["hg", "clone", url, self.code_directory]
        subprocess.call(call_args)

    def _inflate_template_from_url(self):
        temp_file = tempfile.mktemp()

        # fetch URL and cache it locally
        uh,fh = None,None
        try:
            uh = urllib2.urlopen(self.template)
            fh = open(temp_file, 'w+')
            fh.write(uh.read())
        except:
            pass
        finally:
            if fh:
                fh.close()
            if uh:
                uh.close()

        # try to extract to code directory
        if os.path.exists(temp_file):
            try:
                tar = tarfile.open(temp_file)
                tar.extractall(path=self.code_directory)
            except tarfile.ReadError as e:
                print("Template '%s' is not a tar file." % (self.template,))
            finally:
                tar.close()
            os.remove(temp_file)

    def _inflate_template_from_local(self):
        call_args = ["cp", "-r", self.template, self.code_directory]
        subprocess.call(call_args)

    def _inflate_template_from_default(self, name='default'):
        template_path = os.path.realpath(os.path.join(sys.prefix, 'share', 'djenesis', 'templates', name))
        print("inflating from %s" % (template_path,))
        shutil.copytree(template_path, self.code_directory, symlinks=True)

    def _build_virtualenv(self):
        if not self.virtualenv_directory:
            return
        cmd_args = ["virtualenv", "--no-site-packages", "--distribute", self.virtualenv_directory]
        subprocess.call(cmd_args)

    def _install_requirements(self):
        template_requirements = os.path.join(self.code_directory, 'requirements.txt')
        if os.path.exists(template_requirements):
            self._env_pip("install", "-r", template_requirements)
        else:
            # no requirements file was found, no packages were specified, install Django then
            if len(self.pip_packages) < 1:
                self.pip_packages = ['Django']

        if len(self.pip_packages) > 0:
            self._env_pip("install", *self.pip_packages)

    def _real_path(self, s, cwd='.'):
        return os.path.abspath(os.path.join(cwd, s))

    def _env_pip(self, *args):
        subprocess.call([os.path.join(self.virtualenv_directory, 'bin', 'pip')] + list(args))





if __name__ == '__main__':
    script = DjenesisScript()
    script.main(*sys.argv)
